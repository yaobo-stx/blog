{
    "version": "https://jsonfeed.org/version/1",
    "title": "wxsm's space",
    "home_page_url": "https://wxsm.space",
    "feed_url": "https://wxsm.space/feed.json",
    "description": "Just another personal blog.",
    "items": [
        {
            "id": "https://wxsm.space/posts/2020-11-19-auto-changelog-with-gitlab.html",
            "url": "https://wxsm.space/posts/2020-11-19-auto-changelog-with-gitlab.html",
            "title": "Auto Changelog with GitLab",
            "summary": "\n上一篇博文 Integrate Renovate with GitLab 中介绍了为私有代码仓库与私有源提供依赖自动检测更新并发起 Merge Request 的方式。Renovate 可以自动通过 Release Notes 获取到版本之间的更新日志，并在 MR 中展示，这为执行合并的评审人提供了极大的便利。\n接下来需要解决另一个问题：如何为分散在各处的私有依赖自动生成更新日志？",
            "date_modified": "2020-11-19T02:43:53.946Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-11-09-integrate-renovate-with-gitlab.html",
            "url": "https://wxsm.space/posts/2020-11-09-integrate-renovate-with-gitlab.html",
            "title": "Integrate Renovate with GitLab",
            "summary": "\n\n企业项目群中往往会有部分代码逻辑需要公用，将其抽离作为公共包发布到私有源的做法是比较优雅的解决方式。但是这么做的话后期需要面临一个问题：当一个公共依赖包的使用者数量逐渐庞大的时候，如何保证当此包发布新版本时，所有使用者都能尽可能快地得到更新？\n传统的解决方案：\n\n手工对所有项目逐个升级。这种办法相当繁琐，且容易产生遗漏，当项目数量足够庞大的时候，发布一次将会时相当痛苦的体验；\n在依赖安装时指定版本为 latest。这种办法虽然能保证每次安装时都能得到最新版本，但是却有诸多弊端，如：\n\n无法保证依赖的安全性，有可能一次更新不慎造成大面积的瘫痪；\n对「依赖锁」不友好，如 yarn.lock 等。\n\n因此，如何使这个过程变得优雅，是一个亟待解决的问题。",
            "image": "https://static.wxsm.space/others/revonate.png",
            "date_modified": "2020-11-09T12:49:56.979Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-11-02-publish-using-github-action.html",
            "url": "https://wxsm.space/posts/2020-11-02-publish-using-github-action.html",
            "title": "Publish using GitHub Action",
            "summary": "本文是一些 GitHub Actions 常用发布动作的总结。\n强烈建议将所有 Publish actions 分开执行，不要集中到一个 Workflow 内。原因是如果其中一个动作因为某些原因失败了，GitHub 目前只能重启整个 Workflow，而如果 Workflow 内某个 Job 已经成功了，那么该 Job 下一次执行必然是失败（因为此类任务一般不能对同一个版本号执行两次，发布成功一次以后第二次尝试将会被拒绝发布），因此这一个提交的 Workflow 将永远不可能成功。\n需要注意的是，以下所提到的 secrets.GITHUB_TOKEN 均是 GitHub Action 内置的 Access Token，无需自行创建。而其它 secrets 则需要在 项目主页 -&gt; Settings -&gt; Secrets 处创建。",
            "date_modified": "2020-11-02T08:25:10.612Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-10-26-enable-soft-wrap-for-markdown-files-in-idea-by-default.html",
            "url": "https://wxsm.space/posts/2020-10-26-enable-soft-wrap-for-markdown-files-in-idea-by-default.html",
            "title": "IDEA 为 Markdown 文件默认启用 SoftWrap",
            "summary": "\n应该 JetBrains 家的所有 IDE 都有这个配置。习惯了用 Markdown 写博客的人每次都要手动点一下 SoftWrap 挺烦的。后来发现了一个配置可以帮我省去这一步：\n打开设置，找到：Editor &gt; General &gt; Soft Wraps，将 Soft-wrap files 选项勾上即可。IDE 默认已经填上了 .md; .txt; .rst; .adoc，因此不需要再做别的事情。\n\n这样一来，每次只要打开以上格式的文件，编辑器就会自动开启 SoftWrap，一劳永逸。",
            "image": "https://static.wxsm.space/blog/98069913-fc341280-1e9a-11eb-82d4-2dbaa96672bd.png",
            "date_modified": "2020-10-26T03:23:49.630Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-10-25-a-difficult-debug-note.html",
            "url": "https://wxsm.space/posts/2020-10-25-a-difficult-debug-note.html",
            "title": "记一次艰难的 Debug",
            "summary": "\n这是一次关于本博客的 Debug 经历，过程非常曲折。关键词：Vue / SSR / 错配。\n不知道从哪篇博文开始，博客在直接从内页打开时，或者在内页刷新浏览器时，会报以下错误：\napp.73b8bd4d.js:8\nDOMException: Failed to execute &#39;appendChild&#39; on &#39;Node&#39;:\nThis node type does not support this method.\n\n该错误：\n\n只会在 build 模式出现；\n只会在发布上 Github Pages 后出现；\n只会在某些博文中出现；\n只会在直接从链接进入该博文，或者在该博文页面刷新时出现。\n\n该错误带来的影响，会导致页面上的所有 JavaScript 功能全部失效，具体来说是与 Vue.js 相关的功能。如：导航链接（因为使用了 Vue-Router），评论框，一些依赖于 Vue.js 的 VuePress 插件，等等。",
            "image": "https://static.wxsm.space/blog/97097835-c465e780-16b0-11eb-8d93-ac2cee64895b.png",
            "date_modified": "2020-10-25T04:08:13.685Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-10-21-automatic-cd-from-shell-scripts-to-k8s.html",
            "url": "https://wxsm.space/posts/2020-10-21-automatic-cd-from-shell-scripts-to-k8s.html",
            "title": "自动化部署: 从脚本到 K8s",
            "summary": "\n\n如果公司有专业运维，项目的部署上线过程一般来说开发者都不会接触到。但是很不幸，我所在的团队没有独立的运维团队，所以一切都得靠自己（与同事）。\n以下都只是工作中逐步优化得到的经验总结，并且只以 Node.js 程序部署为例。",
            "image": "https://wxsm.space/https://static.wxsm.space/others/kubernetes-logo.png =500x",
            "date_modified": "2020-10-21T02:31:34.371Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-10-12-cache-yarn-in-github-actions.html",
            "url": "https://wxsm.space/posts/2020-10-12-cache-yarn-in-github-actions.html",
            "title": "Cache Yarn in Github Actions",
            "summary": "\n在 CI 中缓存安装下来的依赖项是提速的关键，Github Actions 官方文档 提供了如下方案 (NPM)：",
            "date_modified": "2020-10-12T05:46:53.173Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-10-10-upgrade-webpack-of-vue-cli-projects-from-3-to-4.html",
            "url": "https://wxsm.space/posts/2020-10-10-upgrade-webpack-of-vue-cli-projects-from-3-to-4.html",
            "title": "Upgrade Webpack of Vue-Cli Projects from 3 to 4",
            "date_modified": "2020-10-10T08:59:49.288Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-09-23-gitlab-ce-code-review-bot.html",
            "url": "https://wxsm.space/posts/2020-09-23-gitlab-ce-code-review-bot.html",
            "title": "Gitlab CE Code-Review Bot",
            "summary": "\n\n由于 Gitlab CE 做代码评审时缺少了关键的评审员功能（详情参考此 issue），因此在使用 CE 的同时又想要做代码评审的话，就必须要自己想办法了。\n网上能找到的最多的解决方案就是在 Gitlab 前面再部署一套 Gerrit，通过拦截推送的代码以及同步两个库来实现。但是这种方案有诸多弊端。比如：\n\n割裂的用户体验。原本习惯了使用 Gitlab 系统的人，要开始学习晦涩难懂的 Gerrit；\n代码同步的不稳定性和不确定性。系统每增加一层逻辑，可靠性就降低一些；\n复杂的使用方式：代码必须要从 Gerrit clone，同时 push 时分支名必须加上 refs 前缀，否则无法进入评审\n...\n\n总体来说，以上的种种原因让我觉得 Gerrit 并不是最好的解决方案。对于凡事追求完美的处女座的我来说，我想要的东西大概应该具备以下几点：\n\n最好是能直接在 Gitlab 上面进行评审。因为 CE 可以说是万万事俱备，只差流程；\n最好是对原 Git 和 Gitlab 使用流程、习惯没有任何更改和侵入，仅增加评审流程；\n最好是可以可以自动化整个流程（评审人自动分配、评审完自动合并，等等）。\n\n好在，Gitlab 有一套完备的 Web hook 以及 API 系统，可以支撑起我的想法。",
            "image": "https://wxsm.space/https://static.wxsm.space/others/gitlab-logo.svg =250x",
            "date_modified": "2020-09-23T05:00:24.748Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-07-17-wsl-on-windows-10-and-node-js.html",
            "url": "https://wxsm.space/posts/2020-07-17-wsl-on-windows-10-and-node-js.html",
            "title": "WSL on Windows 10 and Node.js",
            "summary": "\nLinux 的命令行与构建工具一般来说要比 Windows 好用，但 Windows 的用户界面毫无疑问要比 Linux 好用。以往在 Windows 10 上安装 Linux，要么是使用虚拟机，要么是使用双系统，总是无法做到两头兼顾。现在 Windows 10 有了 WSL 技术，使得「二者合一」成为了可能。",
            "date_modified": "2020-07-17T14:13:02.853Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-07-03-use-eslint-to-forbid-entire-import-of-lodash.html",
            "url": "https://wxsm.space/posts/2020-07-03-use-eslint-to-forbid-entire-import-of-lodash.html",
            "title": "使用 Eslint 来禁止 Lodash 的整体引入",
            "summary": "前端项目使用 lodash 时需要注意，一不小心就会把整个库引入进来，大大增加最终打包体积。",
            "date_modified": "2020-07-03T09:57:39.599Z"
        },
        {
            "id": "https://wxsm.space/posts/2020-06-23-06-23-2020.html",
            "url": "https://wxsm.space/posts/2020-06-23-06-23-2020.html",
            "title": "06/23/2020",
            "summary": "因为我真的是被打击到了，近一年来一直在承受打击。害怕了，就像是一直在被突破底线，刚刚才鼓起勇气接受这个它，突然又来说，这样不行，还得再往下一点。如此往复了好几次好几次，以致我实在是没有信心了。",
            "date_modified": "2020-06-23T05:29:40.324Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-12-25-use-lodash-in-wechat-mini-programs.html",
            "url": "https://wxsm.space/posts/2019-12-25-use-lodash-in-wechat-mini-programs.html",
            "title": "在微信小程序中使用 lodash",
            "summary": "由于微信小程序中的 JavaScript 运行环境与浏览器有些许区别，因此在引用某些 npm lib 时会发生问题。这时候需要对源码做出一些改动。\n\n小程序环境比较特殊，一些全局变量（如 window 对象）和构造器（如 Function 构造器）是无法使用的。\n\n在小程序中直接 import lodash 会导致以下错误：\nUncaught TypeError: Cannot read property &#39;prototype&#39; of undefined\n",
            "date_modified": "2019-12-25T09:44:44.883Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-11-15-conditional-rendering-in-react.html",
            "url": "https://wxsm.space/posts/2019-11-15-conditional-rendering-in-react.html",
            "title": "Conditional Rendering in React",
            "summary": "如何进行条件渲染是一个 MVx 框架最基础的问题之一，但是它在 React 中总是会给人提出各种各样的问题。要么「不够优雅」，要么「不够可靠」，要么「不够好用」，现有的各种各样的方法之中，总是逃不过这三种问题的其中之一。至于 React-Native，虽然它与 React 「原则上一致」，但它存在的问题实际上就是要比 React 更多一些。",
            "date_modified": "2019-11-15T02:20:42.155Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-10-24-centos7-firewall-commands.html",
            "url": "https://wxsm.space/posts/2019-10-24-centos7-firewall-commands.html",
            "title": "CentOS7 Firewalld",
            "summary": "FirewallD (firewall daemon) 作为 iptables 服务的替代品，已经默认被安装到了 CentOS7 上面。",
            "date_modified": "2019-10-24T01:28:04.174Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-10-09-my-crohns-disease-and-treatment-records.html",
            "url": "https://wxsm.space/posts/2019-10-09-my-crohns-disease-and-treatment-records.html",
            "title": "克罗恩病患病与治疗记录",
            "summary": "现在是 2019 年 10 月，大约是我患克罗恩病（CD）的第 10 个年头。我写这篇记录的目的是记录自己的治疗过程，同时也为他人提供参考。",
            "date_modified": "2019-10-09T09:06:58.422Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-09-23-react-hooks.html",
            "url": "https://wxsm.space/posts/2019-09-23-react-hooks.html",
            "title": "React Hooks",
            "summary": "Hooks 是 React 在 v16.8.0 版本所支持的一个新特性，允许开发者在 Functional Component 中实现「状态」以及「生命周期」等原本只能在 Class Component 中实现的特性。\n而 Vue Function-based API 是将来会出现在 Vue.js 3.0 大版本中的一个 API 变革的整体预览，二者（至少）在形式上保持了高度统一，而 yyx 也在文章中直言是受到了 React Hooks 的启发，二者分别解决了自身框架的一些痛点，并允许开发写编者更加「纯粹」的函数式组件。也许可以认为是未来前端框架发展的一个大方向？",
            "date_modified": "2019-09-23T02:13:05.102Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-07-25-webkit-overflow-scrolling.html",
            "url": "https://wxsm.space/posts/2019-07-25-webkit-overflow-scrolling.html",
            "title": "-webkit-overflow-scrolling",
            "summary": "-webkit-overflow-scrolling CSS 属性可以让滚动元素在 ios 设备上获得接近原生的平滑滚动以及滚动回弹效果。\n支持的值：\n\nauto 普通滚动行为，当手指离开屏幕时，滚动会立即停止（默认）\ntouch 基于动量的滚动行为，当手指离开屏幕时，滚动会根据手势强度以相应的速度持续一段时间，同时会赋予滚动回弹的效果\n",
            "date_modified": "2019-07-25T02:01:20.712Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-07-23-blog-migrated-to-vuepress.html",
            "url": "https://wxsm.space/posts/2019-07-23-blog-migrated-to-vuepress.html",
            "title": "Blog Migrated to VuePress",
            "summary": "博客正式迁移到了 VuePress，有以下两点原因：\n\n想做一个极简化改版，但懒得折腾了\n希望以后重心放在写文章，而不是维护博客上\n\n共勉。",
            "date_modified": "2019-07-23T03:40:08.642Z"
        },
        {
            "id": "https://wxsm.space/posts/2019-04-15-benz-and-996.html",
            "url": "https://wxsm.space/posts/2019-04-15-benz-and-996.html",
            "title": "奔驰事件与 996",
            "summary": "996 其实也是同样的道理。公司敢于非法压榨员工，员工却无可奈何，只能通过在 Github 发声聊以自慰。近期互联网大佬频频发声，大谈创业艰难史，可是始终是避重就轻，你想奋斗没有人拦着你，但逼别人奋斗是怎么回事呢？问题的关键是「强制」而不是「996」，没有一人提及。最可笑的是马云的「你要来谈法律，那法律有规定这么齐全的设备吗？有规定这么好的食堂吗？」，可以看出这些站在企业顶端的人都是些什么嘴脸。求求你把这些都撤了，给我发合法的加班费好吗？当然这是不可能的，大佬们会跟你谈梦想，谈兄弟，这些都不成，那您请滚吧。",
            "date_modified": "2019-04-15T08:23:49.729Z"
        }
    ]
}