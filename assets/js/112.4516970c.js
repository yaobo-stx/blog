(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{476:function(t,s,n){"use strict";n.r(s);var a=n(11),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Gitlab 有一套内置的 CI 系统，相比集成 Jenkins 来说更加方便一些，用法也稍为简单。以下是搭建过程。")]),t._v(" "),n("p",[t._v("前置准备：须要准备一台用来跑 CI 任务的机器（可以是 Mac / Linux / Windows 之一）。")]),t._v(" "),n("h2",{attrs:{id:"创建-gitlab-ci-yml-文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建-gitlab-ci-yml-文件"}},[t._v("#")]),t._v(" 创建 "),n("code",[t._v(".gitlab-ci.yml")]),t._v(" 文件")]),t._v(" "),n("p",[t._v("和 Github CI 一样，Gitlab CI 也使用 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/YAML",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML"),n("OutboundLink")],1),t._v(" 文件来定义项目的整个构建任务。只要在需要集成 CI 的项目根目录下添加这份文件并写入内容，默认情况下 Gitlab 就会为此项目启用构建。")]),t._v(" "),n("p",[t._v("配置文档："),n("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/yaml/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.gitlab.com/ee/ci/yaml/README.html"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("一份较为完整的配置文件样例：")]),t._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#指定 docker 镜像")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("9.3.0\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为 docker 镜像安装 ssh-agent 以执行部署任务")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eval $(ssh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s)\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "$SSH_PRIVATE_KEY" '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" tr "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d '\\r' "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" ssh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("add "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" /dev/null\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p ~/.ssh\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('e "Host '),n("span",{pre:!0,attrs:{class:"token important"}},[t._v("*\\n\\tStrictHostKeyChecking")]),t._v(' no\\n\\n" '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" ~/.ssh/config\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 700 ~/.ssh\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#定义构建的三个阶段")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#定义可缓存的文件夹")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node_modules/\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#构建任务")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-job")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm install"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run build"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#测试任务")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test-job")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm install"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm test"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#部署任务")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy-job")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" release\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm install"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run build"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' ssh user@host "'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("any shell commands"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('"\n  '),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node\n")])])]),n("p",[t._v("整个构建过程基本上一目了然，比 Jenkins 简便很多。Gitlab CI 会按顺序执行 build / test / deploy 三个 stage 的任务，遇到出错即中止，并不再往下执行。同个 stage 中的多个任务会并发执行。需要注意的是，各个 stage 的工作空间是独立的。")]),t._v(" "),n("p",[t._v("其中 "),n("code",[t._v("$SSH_PRIVATE_KEY")]),t._v(" 是在相应 Gitlab 项目中配置的一个 Secret Value，是构建机的 ssh 私钥。后面再谈。")]),t._v(" "),n("p",[t._v("将 "),n("code",[t._v(".gitlab-ci.yml")]),t._v(" 文件推送到服务器后，打开项目主页，点击 Commit 记录，会发现构建任务启动并处于 pending 状态：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://docs.gitlab.com/ee/ci/quick_start/img/new_commit.png",alt:"img"}})]),t._v(" "),n("p",[t._v("点击构建图标，则可以进入到 CI 详情页面：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://docs.gitlab.com/ee/ci/quick_start/img/single_commit_status_pending.png",alt:"img"}})]),t._v(" "),n("p",[t._v("点击具体任务查看 log 则提示项目没有配置相应的 runner 来执行构建任务。也就是下一步要做的事情。")]),t._v(" "),n("h2",{attrs:{id:"搭建-gitlab-runner"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搭建-gitlab-runner"}},[t._v("#")]),t._v(" 搭建 Gitlab runner")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://docs.gitlab.com/runner/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab runner"),n("OutboundLink")],1),t._v(" 是用来执行 CI 任务的客户端，它可以在一台机器上搭建，并且同时为多个项目服务。"),n("a",{attrs:{href:"https://docs.gitlab.com/runner/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装教程"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("安装好 runner 后，还要为机器安装 "),n("a",{attrs:{href:"https://www.docker.com/community-edition",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker"),n("OutboundLink")],1),t._v("，用来作为具体构建的容器。")]),t._v(" "),n("p",[t._v("以上均安装完成后，就可以开始配置 runner 了。配置过程中需要用到的一些信息可以在下图位置找到（项目主页 -> Settings -> CI / CD -> Runners settings）。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://docs.gitlab.com/ee/ci/quick_start/img/runners_activated.png",alt:"img"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ sudo gitlab-runner register\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\n(填写上图位置的地址)\n\nPlease enter the gitlab-ci token for this runner\n(填写上图位置的token)\n\nPlease enter the gitlab-ci description for this runner\n[hostame] my-runner\n\nPlease enter the gitlab-ci tags for this runner (comma separated):\nnode\n\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\ndocker\n\nPlease enter the Docker image (eg. ruby:2.1):\nnode:latest\n")])])]),n("p",[t._v("其中 description 与 tags 将来都可以在 Gitlab UI 中更改。注意 tag 必须与 "),n("code",[t._v(".gitlab-ci.yml")]),t._v(" 中各个 job 指定的 tag 一致，这个 job 才会分配到这个 runner 上去。")]),t._v(" "),n("p",[t._v("如此一来则大功告成，回到 Gitlab UI，在 Runner settings 内可以看到配置好的 runner，并且可以执行任务了。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://docs.gitlab.com/ee/ci/quick_start/img/pipelines_status.png",alt:"img"}})]),t._v(" "),n("h2",{attrs:{id:"遇到的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题"}},[t._v("#")]),t._v(" 遇到的问题")]),t._v(" "),n("p",[t._v("其实本地构建基本上都没什么问题，遇到的坑基本集中在 deploy 阶段，即远程到服务器上去发布的这一步。按照 Gitlab 提供的"),n("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/ssh_keys/",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),n("OutboundLink")],1),t._v("，走完了所有的步骤后，构建机总是无法使用 private key 直接登录，而是必须输入密码登录。尝试了查看 ssh 日志，重启服务器 sshd 服务，修改文件夹权限等等，debug 了半天还是没有解决该问题。后来偶然发现在部署服务器上使用 sshd 开启一个新的服务，用新的端口即可顺利登录，也不知道是为什么。")]),t._v(" "),n("p",[t._v("更新：另外一个方法，可以使用 "),n("code",[t._v("sshpass")]),t._v(" 命令来进行登录。用法：")]),t._v(" "),n("ol",[n("li",[t._v("在 docker 镜像中安装 "),n("code",[t._v("sshpass")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ which sshpass || ( apt-get update -y && apt-get install sshpass -y )\n")])])]),t._v("其中 "),n("code",[t._v("-y")]),t._v(" 是为了防止安装过程中出现需要选择的项目，一律选 YES")]),t._v(" "),n("li",[t._v("在项目 CI 变量中设置 ssh 密码")]),t._v(" "),n("li",[t._v("使用 "),n("code",[t._v("sshpass")]),t._v(" 复制文件，或登录远程服务器"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# scp\n$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e scp -r local_folder user@host:remote_folder"\n# ssh\n$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e ssh user@host\n')])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);