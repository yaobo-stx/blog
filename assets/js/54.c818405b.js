(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{417:function(t,s,a){"use strict";a.r(s);var n=a(11),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://static.wxsm.space/blog/48595806-414e9980-e991-11e8-8e9c-1922fa56a501.png",alt:""}})]),t._v(" "),a("p",[t._v("之前一直以为 MEAN 只是一个概念上的东西，表示以 "),a("a",{attrs:{href:"http://mongodb.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mongodb"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"http://expressjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Express"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"http://angularjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AngularJs"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NodeJs"),a("OutboundLink")],1),t._v(" 为基础的全栈应用开发模式。这几天在公司接手相应项目的时候发现已经有人做出来并且维护着一些这样的 App 结构体，用过以后觉得还不错。"),a("a",{attrs:{href:"https://github.com/meanjs/mean",target:"_blank",rel:"noopener noreferrer"}},[t._v("MEANJS"),a("OutboundLink")],1),t._v(" 是一个开源的 JavaScript 全栈应用解决方案，主要用到的技术自然就是以上提到的那些。使用成熟的解决方案可以使自己的项目更加易于开发以及维护，等等好处就不再赘述。")]),t._v(" "),a("h2",{attrs:{id:"关于mean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于mean"}},[t._v("#")]),t._v(" 关于MEAN")]),t._v(" "),a("p",[t._v("本文主要关注 MEANJS本 身，对于MEAN之中的种种技术就不再多做介绍。下面贴MEANJS给出的一些链接。")]),t._v(" "),a("ul",[a("li",[t._v("MongoDB - Go through "),a("a",{attrs:{href:"http://mongodb.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MongoDB Official Website"),a("OutboundLink")],1),t._v(" and proceed to their "),a("a",{attrs:{href:"http://docs.mongodb.org/manual/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Official Manual"),a("OutboundLink")],1),t._v(", which should help you understand NoSQL and MongoDB better.")]),t._v(" "),a("li",[t._v("Express - The best way to understand express is through its "),a("a",{attrs:{href:"http://expressjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Official Website"),a("OutboundLink")],1),t._v(", which has a "),a("a",{attrs:{href:"http://expressjs.com/starter/installing.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started"),a("OutboundLink")],1),t._v(" guide, as well as an "),a("a",{attrs:{href:"http://expressjs.com/guide/error-handling.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ExpressJS Guide"),a("OutboundLink")],1),t._v(" guide for general express topics. You can also go through this "),a("a",{attrs:{href:"http://stackoverflow.com/questions/8144214/learning-express-for-node-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow Thread"),a("OutboundLink")],1),t._v(" for more resources.")]),t._v(" "),a("li",[t._v("AngularJS - Angular’s "),a("a",{attrs:{href:"http://angularjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Official Website"),a("OutboundLink")],1),t._v(" is a great starting point. You can also use "),a("a",{attrs:{href:"http://www.thinkster.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Thinkster Popular Guide"),a("OutboundLink")],1),t._v(", and the"),a("a",{attrs:{href:"https://egghead.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Egghead Videos"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("Node.js - Start by going through "),a("a",{attrs:{href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js Official Website"),a("OutboundLink")],1),t._v(" and this "),a("a",{attrs:{href:"http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow Thread"),a("OutboundLink")],1),t._v(", which should get you going with the Node.js platform in no time.")])]),t._v(" "),a("h2",{attrs:{id:"安装依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[t._v("#")]),t._v(" 安装依赖")]),t._v(" "),a("p",[t._v("作为一个集大成者，MEANJS 需要的运行环境还是挺多的，但是相对 Java 项目来说简直不值一提。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NodeJs")]),t._v(" - 没有 Node 谈何 MEAN，注意的是目前的 MEANJS 版本（0.3.x）还不支持最新的 5.x NodeJs，我就中了这招")]),t._v(" "),a("li",[a("strong",[t._v("MongoDB")]),t._v(" - 和 NodeJs 的集成比较好，下载安装包一路 next 即可")]),t._v(" "),a("li",[a("strong",[t._v("Ruby/Python/.Net 2+")]),t._v(" - 一些 Node 的模块需要用到这些东西，毕竟 Node 只是一个 runtime，在服务器端一些稍微底层的操作还是要用到其他东西（12-14-2015更新：Python必须是 2.x 版本）")]),t._v(" "),a("li",[a("strong",[t._v("Bower")]),t._v(" - 前端包管理器，和 npm 组成一前一后的完整管理体系，相当于 Java 的 Maven")]),t._v(" "),a("li",[a("strong",[t._v("Grunt/Grunt CLI")]),t._v(" - JavaScript 世界的自动化工具，重复工作全靠它。CLI 是 Grunt 的命令行工具。")]),t._v(" "),a("li",[a("strong",[t._v("Sass/Less")]),t._v(" - MEANJS 用到了 Sass 去编译 CSS，所以也要添加它的支持。其实我个人感觉这个有点多余了。")])]),t._v(" "),a("h2",{attrs:{id:"启动-meanjs-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动-meanjs-app"}},[t._v("#")]),t._v(" 启动 MEANJS APP")]),t._v(" "),a("h3",{attrs:{id:"安装依赖模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖模块"}},[t._v("#")]),t._v(" 安装依赖模块")]),t._v(" "),a("p",[t._v("完成以上安装以及相应环境变量的配置以后，就可以准备启动 MEANJS 服务器了。首先需要在文件夹根目录运行 "),a("code",[t._v("$ npm install")]),t._v(" 指令，根据 Readme 中的说法，这条指令做了以下的事情：")]),t._v(" "),a("ol",[a("li",[t._v("安装运行所需的 Node 模块")]),t._v(" "),a("li",[t._v("如果是测试环境则安装开发测试所需的 Node 模块")]),t._v(" "),a("li",[t._v("最后执行 bower 安装前端模块")])]),t._v(" "),a("p",[t._v("不过我在最后一步有时候会遇到问题，需要手动再进行一次 "),a("code",[t._v("$ bower install")]),t._v("，另外，npm 的官方源在大陆访问并不稳定，可以使用 "),a("a",{attrs:{href:"http://npm.taobao.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("淘宝镜像"),a("OutboundLink")],1),t._v(" 替代，Ruby 也是同理："),a("a",{attrs:{href:"https://ruby.taobao.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ruby镜像"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("p",[t._v("12-14-2015 更新：这一步容易出现问题，一般仔细看 Log 都能找到问题所在，无非是哪个依赖没有配置环境变量/版本不对等，重新配置好以后删除 "),a("code",[t._v("Node_modules")]),t._v(" 文件夹再重新运行命令。")]),t._v(" "),a("h3",{attrs:{id:"启动-mongodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动-mongodb"}},[t._v("#")]),t._v(" 启动 Mongodb")]),t._v(" "),a("p",[t._v("因为 MEANJS 默认为我们做了一个简单的用户注册登录模块，里面有一些数据库的增删查改，所以在启动服务器之前需要先启动数据库。随便找一个地方打开控制台输入 "),a("code",[t._v("$ mongod --dbpath ***")]),t._v("，"),a("code",[t._v("\\***")]),t._v(" 处填写一个路径，"),a("code",[t._v("mongod")]),t._v(" 就能够在指定位置创建一个文件型数据库并连接之，如果该位置已存在数据库文件则会直接打开连接。")]),t._v(" "),a("h3",{attrs:{id:"启动服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动服务器"}},[t._v("#")]),t._v(" 启动服务器")]),t._v(" "),a("p",[t._v("在以上都准备完成以后，我们就可以在项目根目录通过一条简单的指令 "),a("code",[t._v("$ grunt")]),t._v(" 来启动服务器了，启动成功后可以在 "),a("a",{attrs:{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000"),a("OutboundLink")],1),t._v(" 看到项目主页。")]),t._v(" "),a("h3",{attrs:{id:"关于grunt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于grunt"}},[t._v("#")]),t._v(" 关于Grunt")]),t._v(" "),a("p",[a("code",[t._v("$ grunt")]),t._v(" 这条指令会读取项目目录下的 "),a("code",[t._v("gruntfile.js")]),t._v("** **文件，并执行文件中定义的 task。MEANJS 的文档中并没有对其功能进行说明，以下是我的解读：")]),t._v(" "),a("h4",{attrs:{id:"插件配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件配置"}},[t._v("#")]),t._v(" 插件配置")]),t._v(" "),a("p",[t._v("以下都是 grunt task 中用到的插件的相关配置，具体插件以及相关文档都可以在 "),a("a",{attrs:{href:"http://www.gruntjs.net/plugins",target:"_blank",rel:"noopener noreferrer"}},[t._v("Grunt插件页面"),a("OutboundLink")],1),t._v(" 找到。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prod"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("env")]),t._v(" 定义了三个服务器的运行环境：测试，开发，以及产品，在文件的最后会用到。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\ndefaultAssets "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./config/assets/default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ntestAssets "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./config/assets/test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\nwatch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  serverViews"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    files"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" defaultAssets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("views"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    options"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      livereload"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("watch")]),t._v(" 指定了动态监听的目录/文件，可以看到在每一个 View/Js/Css 监听列表中都加入了 "),a("code",[t._v("livereload")]),t._v(" 选项，这个选项的作用是当被监听的文件发生变化时，浏览器会自动刷新。不过 watch 会再创建一个监听端口（默认为 35729），打开 "),a("a",{attrs:{href:"http://localhost:35729/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:35729/"),a("OutboundLink")],1),t._v(" 可以发现。被加载的首先是配置文件 "),a("code",[t._v("./config/assets/default.js")]),t._v(" 与相应的 "),a("code",[t._v("test.js")]),t._v(" 等，然后再配置文件内可以找到文件列表，其中已经包括已经用到的以及将来会加入的文件（通过通配符实现），只要我们在开发时把文件放在相应结构位置上，grunt 就会自动监听。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("nodemon"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'server.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    options"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      nodeArgs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--debug'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      ext"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'js,html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      watch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("union")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("defaultAssets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gruntConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultAssets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("views"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultAssets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allJS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultAssets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("nodemon")]),t._v(" 配置了服务器自动重启。当 server 端的 config/views/js 文件发生变化时，"),a("code",[t._v("server.js")]),t._v(" 脚本就会自动执行。由于只是服务器的重启而不是重新执行 grunt，所以几乎是秒速。以前用过一些类似的 node module 叫 supervisor 和 forever，不过这个集成到了 grunt task 中。写过 JavaEE project 的人再用这个才能体会到时间的宝贵。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nodemon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'watch'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  debug"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nodemon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'watch'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node-inspector'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    logConcurrentOutput"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("concurrent")]),t._v(" 插件可以使任务并发执行，让前端与服务器端监听同时在一个终端窗口中执行/ Log")]),t._v(" "),a("p",[a("code",[t._v("cshint/csslint")]),t._v(" 这两个插件主要是为了在 build 的时候顺便检查一下 js/css 文件中有没有常见的 warning / error，存在 error 时会停止 build task 并给出提示，不过控制台输出用户体验不是很好，开发过程中作用不大，我们都有 IDE，需要作为产品上线时跑一遍可能会更有参考价值。")]),t._v(" "),a("p",[t._v("后面的 "),a("code",[t._v("ngAnnotae")]),t._v(" 插件可以在build的过程中对 angular js 的 annotation 进行简化以减少代码量，提高效率，属于锦上添花型。"),a("code",[t._v("uglify/cssmin")]),t._v(" 则相应地执行 js/css 代码压缩任务。至于 "),a("code",[t._v("sass/less")]),t._v(" 很明显就是 css 编译器了。再之后的多是 debug / test 插件。")]),t._v(" "),a("h4",{attrs:{id:"注册任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册任务"}},[t._v("#")]),t._v(" 注册任务")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("grunt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'taskName'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'***'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'***'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("类似像这样的代码就是向grunt注册一个任务，第二个数组参数则是注册任务的内容，里面可以填另一个任务的名字或者是插件的名字，或者直接填写 function 取代该数组。通过在控制台输入 "),a("code",[t._v("$ grunt taskName")]),t._v(" 执行任务，而不输入 taskName 的话则是执行 default 任务，当前 "),a("code",[t._v("gruntfile.js")]),t._v(" 中的 default task 如下：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Run the project in development mode")]),t._v("\ngrunt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'env:dev'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mkdir:upload'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'copy:localConfig'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'concurrent:default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这个任务里面包含了一些子任务，就不一一说明了，有兴趣的可以自行查看，到这里终于可以说说 "),a("code",[t._v("$ grunt")]),t._v(" 指令到底做了什么：")]),t._v(" "),a("ol",[a("li",[t._v("设置运行环境为 dev，即开发")]),t._v(" "),a("li",[t._v("执行 js/css 等文件的语法检查")]),t._v(" "),a("li",[t._v("确保上传路径存在（MEANJS 默认带了一个用户上传头像的功能）")]),t._v(" "),a("li",[t._v("加载一个自定义配置文件（里面可以填写 db 以及一些 api key 等信息）")]),t._v(" "),a("li",[t._v("default 模式启动 concurrent 前后端热部署")])]),t._v(" "),a("p",[t._v("可以看到这里面并没有启动服务器的指令，其实在nodemon中已经配置了服务器入口即 "),a("code",[t._v("server.js")]),t._v("。于是在所有准备工作完成后，开发环境的服务器就启动起来了。")]),t._v(" "),a("p",[t._v("当然 gruntfile 中也包含了 dev 以及 tes t环境的 task，需要切换运行环境的时候只需要在 grunt 命令中加入相应参数即可，还是比较方便的。")]),t._v(" "),a("h2",{attrs:{id:"项目结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),a("h3",{attrs:{id:"根目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根目录结构"}},[t._v("#")]),t._v(" 根目录结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("├── bower.json\n├── config\n├── gruntfile.js\n├── modules\n├── package.json\n└── server.js\n")])])]),a("p",[t._v("以上是精简过后的根目录组成，不包括node_modules和public文件夹，以及一些optional和test相关的文件。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("bower.json/package.json")]),t._v(" - 前端/后端依赖说明文件，需要添加依赖时在文件里指定 ID /版本，再运行 "),a("code",[t._v("$ bower install")]),t._v(" 或者 "),a("code",[t._v("$ npm install")]),t._v(" 就会将指定包下载到 "),a("code",[t._v("node_modules/public")]),t._v(" 文件夹中")]),t._v(" "),a("li",[a("strong",[t._v("gruntfile.js")]),t._v(" - grunt 任务配置文件")]),t._v(" "),a("li",[a("strong",[t._v("server.js")]),t._v(" - 服务器启动文件")]),t._v(" "),a("li",[a("strong",[t._v("config")]),t._v(" - 配置文件")]),t._v(" "),a("li",[a("strong",[t._v("modules")]),t._v(" - App 模块，也就是需要我们大量写代码的地方了，可以看到 MEANJS 项目已经包含了若干模块，我们可以在这基础之上添加自己的业务逻辑，或者推到重来")])]),t._v(" "),a("p",[t._v("由于 MEANJS 的目录原则是模块优先，所以前后端的 MVC 会在相应模块目录内得到体现，这点与使用 express js 创建的目录结构有所区别。不过之前公司一位 STE share ExtJs 的时候提到其实都是大同小异，反正到最后目录结构都会变得臃肿。")]),t._v(" "),a("h3",{attrs:{id:"模块结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块结构"}},[t._v("#")]),t._v(" 模块结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("modules\n│   └── moduleName\n│       ├── client\n│       │   ├── config\n│       │   ├── controllers\n│       │   ├── css\n│       │   ├── img\n│       │   ├── services\n│       │   └── views\n│       └── server\n│           ├── config\n│           ├── controllers\n│           ├── models\n│           ├── policies\n│           ├── routes\n│           └── templates\n")])])]),a("p",[t._v("一个模块一般包含以上目录，首先从前端/后端分开，然后是各自的配置/ MVC，非常科学。值得一提的是每个模块各自用到的独立 css / image 等资源也是分开存放的，grunt 会在 build 的时候把它们全部读取并且载入，如果是 production 环境更会将同类压缩到一个文件中去，所以我们并不需要写很多的 include 之流。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("相对于手动使用 MEAN 各项技术结合写程序来说，使用 MEANJS 解决方案可以让我们更方便且快速地搭建项目，并且使我们不用太过于关注业务逻辑以外的问题，开发效率在全栈统一的保证下又提高了不少，不得不说确实是值得中小型项目去研究并且尝试使用一下。至于企业级大型项目，不知道有没有研究或者什么公司尝试过，不太清楚是否适合。")])])}),[],!1,null,null,null);s.default=e.exports}}]);